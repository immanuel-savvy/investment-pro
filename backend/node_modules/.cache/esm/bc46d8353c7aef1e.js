let TOPUP_REQUESTS,USER_REQUESTS,WALLETS,WALLET_ADDRESSES,WITHDRAWAL_REQUESTS,save_image;_3c7‍.x([["topup",()=>topup],["topup_request",()=>topup_request],["add_address",()=>add_address],["withdrawal_request",()=>withdrawal_request],["wallet_addresses",()=>wallet_addresses],["withdraw",()=>withdraw],["withdrawal_requests",()=>withdrawal_requests],["wallet",()=>wallet],["topup_requests",()=>topup_requests]]);_3c7‍.w("../ds/conn",[["TOPUP_REQUESTS",["TOPUP_REQUESTS"],function(v){TOPUP_REQUESTS=v}],["USER_REQUESTS",["USER_REQUESTS"],function(v){USER_REQUESTS=v}],["WALLETS",["WALLETS"],function(v){WALLETS=v}],["WALLET_ADDRESSES",["WALLET_ADDRESSES"],function(v){WALLET_ADDRESSES=v}],["WITHDRAWAL_REQUESTS",["WITHDRAWAL_REQUESTS"],function(v){WITHDRAWAL_REQUESTS=v}]]);_3c7‍.w("./utils",[["save_image",["save_image"],function(v){save_image=v}]]);








const topup = (req, res) => {
  let { value, currency, wallet, user, approve, request } = req.body;
  value = Number(value);
  if (value < 0) value = 0;

  if (!wallet || !value || !currency || !request) return res.end();
  let request_body = TOPUP_REQUESTS.readone(request);
  if (request_body.state !== "pending") return res.end();

  if (!approve) {
    TOPUP_REQUESTS.update(request, { state: "declined" });
    USER_REQUESTS.update({ user, request }, { state: "declined" });
    return res.end();
  }

  let val = WALLETS.update(wallet, { balance: { $inc: value } });
  TOPUP_REQUESTS.update(request, { state: "approved" });
  USER_REQUESTS.update({ user, request }, { state: "approved" });

  res.json({ ok: true, data: { wallet: val } });
};

const topup_request = (req, res) => {
  let { value, currency, image, user, wallet } = req.body;

  value = Number(value);
  if (value < 0) value = 0;

  if (!wallet || !value || !image || !currency) return res.end();

  image = save_image(image);

  let result = TOPUP_REQUESTS.write({
    value,
    currency,
    image,
    wallet,
    user,
    state: "pending",
  });
  USER_REQUESTS.write({
    user,
    credit: true,
    state: "pending",
    request: result._id,
  });

  res.json({ ok: true, data: { _id: result._id, created: result.created } });
};

const withdrawal_request = (req, res) => {
  let { value, currency, address, user, wallet } = req.body;

  value = Number(value);
  if (value < 0) value = 0;

  if (!wallet || !value || !address) return res.end();

  let result = WITHDRAWAL_REQUESTS.write({
    value,

    wallet,
    address,
    user,
    state: "pending",
  });
  USER_REQUESTS.write({
    user,
    credit: false,
    state: "pending",
    request: result._id,
  });
  WALLETS.update(wallet, {
    balance: { $dec: value },
    pending_withdrawal: { $inc: value },
  });

  res.json({ ok: true, data: { _id: result._id, created: result.created } });
};

const withdraw = (req, res) => {
  let { value, wallet, image, user, approve, request } = req.body;
  value = Number(value);
  if (value < 0) value = 0;

  if (!wallet || !value || (!image && approve) || !request) return res.end();
  let request_body = WITHDRAWAL_REQUESTS.readone(request);
  if (request_body.state !== "pending") return res.end();

  if (!approve) {
    WITHDRAWAL_REQUESTS.update(request, { state: "declined" });
    USER_REQUESTS.update({ user, request }, { state: "declined" });
    WALLETS.update(wallet, {
      pending_withdrawal: { $dec: value },
      balance: { $inc: value },
    });
    return res.end();
  }

  let val = WALLETS.update(wallet, {
    pending_withdrawal: { $dec: value },
  });
  WITHDRAWAL_REQUESTS.update(request, {
    state: "approved",
    image: save_image(image),
  });
  USER_REQUESTS.update({ user, request }, { state: "approved" });

  res.json({ ok: true, data: { wallet: val } });
};

const topup_requests = (req, res) => {
  let { state, limit, user, skip } = req.body;

  res.json({
    ok: true,
    data: (user ? USER_REQUESTS : TOPUP_REQUESTS).read(
      user ? { credit: true, user, state } : { state },
      { skip, limit }
    ),
  });
};

const withdrawal_requests = (req, res) => {
  let { state, limit, user, skip } = req.body;

  res.json({
    ok: true,
    data: (user ? USER_REQUESTS : WITHDRAWAL_REQUESTS).read(
      user ? { credit: false, user, state } : { state },
      { skip, limit }
    ),
  });
};

const wallet = (req, res) => {
  let { wallet } = req.body;

  res.json({ ok: true, data: WALLETS.readone(wallet) });
};

const wallet_addresses = (req, res) => {
  let { wallet } = req.params;

  res.json({ ok: true, data: WALLET_ADDRESSES.read({ wallet }) });
};

const add_address = (req, res) => {
  let address = req.body;

  let result = WALLET_ADDRESSES.write(address);

  res.json({ ok: true, data: { _id: result._id, created: result.created } });
};












