let INVESTMENTS,INVESTMENTS_INVESTS,INVESTS,RUNNING_INVESTMENTS,USERS,USERS_INVESTS,WALLETS,investment_fulfilled,send_mail;_90e‍.x([["invest",()=>invest],["fulfil_investment",()=>fulfil_investment],["remove_investment",()=>remove_investment],["add_investment",()=>add_investment],["user_invests",()=>user_invests],["cancel_investment",()=>cancel_investment],["investment_invests",()=>investment_invests],["update_investment",()=>update_investment],["investments",()=>investments]]);_90e‍.w("../ds/conn",[["INVESTMENTS",["INVESTMENTS"],function(v){INVESTMENTS=v}],["INVESTMENTS_INVESTS",["INVESTMENTS_INVESTS"],function(v){INVESTMENTS_INVESTS=v}],["INVESTS",["INVESTS"],function(v){INVESTS=v}],["RUNNING_INVESTMENTS",["RUNNING_INVESTMENTS"],function(v){RUNNING_INVESTMENTS=v}],["USERS",["USERS"],function(v){USERS=v}],["USERS_INVESTS",["USERS_INVESTS"],function(v){USERS_INVESTS=v}],["WALLETS",["WALLETS"],function(v){WALLETS=v}]]);_90e‍.w("./emails",[["investment_fulfilled",["investment_fulfilled"],function(v){investment_fulfilled=v}]]);_90e‍.w("./users",[["send_mail",["send_mail"],function(v){send_mail=v}]]);











const add_investment = (req, res) => {
  let data = req.body;

  let result = INVESTMENTS.write(data);

  res.json({
    ok: true,
    data: {
      _id: result._id,
      image: data.image,
      created: result.created,
    },
  });
};

const update_investment = (req, res) => {
  let data = req.body;

  let result = INVESTMENTS.update(data._id, { ...data });

  res.json({
    ok: true,
    data: {
      _id: result._id,
      image: data.image,
      created: result.created,
    },
  });
};

const investments = (req, res) => {
  res.json({ ok: true, data: INVESTMENTS.read() });
};

const remove_investment = (req, res) => {
  let { investment } = req.params;

  INVESTMENTS.remove(investment);

  res.end();
};

const invest = (req, res) => {
  let { investment, currency, user, amount, wallet } = req.body;

  amount = Math.abs(Number(amount));

  if (!wallet || !user || !amount || !investment)
    return res.json({
      ok: false,
      data: { message: "Incomplete request data" },
    });
  wallet = WALLETS.readone(wallet);

  if (wallet.balance < amount)
    return res.json({ ok: false, data: { message: "Insufficient funds" } });

  let q = {};

  wallet.balance -= amount;
  q.balance = wallet.balance;
  // q.investments = (wallet.investments || 0) + amount;
  _90e‍.g.console.log(q);
  _90e‍.g.console.log(WALLETS.update(wallet._id, q));
  _90e‍.g.console.log(WALLETS.update(wallet._id, { investments: { $inc: amount } }));

  investment = INVESTMENTS.readone(investment);
  let result = INVESTS.write({
    investment: investment._id,
    currency,
    user,
    amount,
    state: "running",
    wallet,
    timestamp: Date.now() + investment.duration * 60 * 60 * 1000,
  });
  RUNNING_INVESTMENTS.write({ invest: result._id });

  INVESTMENTS.update(investment._id, { investments: { $inc: 1 } });
  USERS_INVESTS.write({ invest: result._id, user });
  INVESTMENTS_INVESTS.write({ invest: result._id, investment: investment._id });

  res.json({ ok: true, data: { _id: result._id, created: result.created } });
};

const user_invests = (req, res) => {
  let { user } = req.params;

  res.json({ ok: true, data: USERS_INVESTS.read({ user }) });
};

const investment_invests = (req, res) => {
  let { investment } = req.params;

  res.json({ ok: true, data: INVESTMENTS_INVESTS.read({ investment }) });
};

const fulfil_investment = (req, res) => {
  let running;

  if (!res) running = req;
  else {
    let { invest } = req.body;

    running = RUNNING_INVESTMENTS.readone({ invest });
  }

  let { invest, _id } = running;

  if (invest.timestamp >= Date.now()) return;

  let { user, amount, investment } = invest;
  let { percentage_return, title } = investment;

  user = USERS.readone(user);
  let { wallet, email, firstname, lastname } = user;

  wallet = WALLETS.readone(wallet);

  let earning = amount * (Number(percentage_return) / 100);
  wallet.balance += earning + amount;
  let q = {};
  q.earnings = (wallet.earnings || 0) + earning;
  q.balance = wallet.balance;
  WALLETS.update(wallet._id, q);
  INVESTS.update(invest._id, { state: "fulfilled" });
  RUNNING_INVESTMENTS.remove(_id);

  send_mail({
    recipient: email,
    recipient_name: `${firstname} ${lastname}`,
    subject: `Fulfilled - ${title}`,
    html: investment_fulfilled(invest),
  });

  res && res.end();
};

const cancel_investment = (req, res) => {
  let { user, invest } = req.body;

  RUNNING_INVESTMENTS.remove({ invest });
  invest = INVESTS.readone(invest);

  user = USERS.readone(user || invest.user);
  let wallet = WALLETS.readone(user.wallet);

  let q = {};
  q.balance = wallet.balance + invest.amount;
  q.investments -= invest.amount;
  WALLETS.update(wallet._id, q);

  INVESTS.update(invest._id, { state: "cancelled" });

  res.end();
};












